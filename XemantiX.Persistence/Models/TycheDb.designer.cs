#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XemantiX.Persistence.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Tyche")]
	public partial class TycheDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertuser_relation(user_relation instance);
    partial void Updateuser_relation(user_relation instance);
    partial void Deleteuser_relation(user_relation instance);
    partial void Insertinteraction_type(interaction_type instance);
    partial void Updateinteraction_type(interaction_type instance);
    partial void Deleteinteraction_type(interaction_type instance);
    partial void Insertinteraction_url(interaction_url instance);
    partial void Updateinteraction_url(interaction_url instance);
    partial void Deleteinteraction_url(interaction_url instance);
    partial void Insertlast_interaction_processed(last_interaction_processed instance);
    partial void Updatelast_interaction_processed(last_interaction_processed instance);
    partial void Deletelast_interaction_processed(last_interaction_processed instance);
    partial void Insertparticipant(participant instance);
    partial void Updateparticipant(participant instance);
    partial void Deleteparticipant(participant instance);
    partial void Insertparticipant_type(participant_type instance);
    partial void Updateparticipant_type(participant_type instance);
    partial void Deleteparticipant_type(participant_type instance);
    partial void Insertsns_type(sns_type instance);
    partial void Updatesns_type(sns_type instance);
    partial void Deletesns_type(sns_type instance);
    partial void Insertsns_user(sns_user instance);
    partial void Updatesns_user(sns_user instance);
    partial void Deletesns_user(sns_user instance);
    partial void Insertsystem_attribute(system_attribute instance);
    partial void Updatesystem_attribute(system_attribute instance);
    partial void Deletesystem_attribute(system_attribute instance);
    partial void Insertuser_attribute(user_attribute instance);
    partial void Updateuser_attribute(user_attribute instance);
    partial void Deleteuser_attribute(user_attribute instance);
    partial void Insertuser_email(user_email instance);
    partial void Updateuser_email(user_email instance);
    partial void Deleteuser_email(user_email instance);
    partial void Insertinteraction_url_entity(interaction_url_entity instance);
    partial void Updateinteraction_url_entity(interaction_url_entity instance);
    partial void Deleteinteraction_url_entity(interaction_url_entity instance);
    partial void Insertinteraction_url_keyword(interaction_url_keyword instance);
    partial void Updateinteraction_url_keyword(interaction_url_keyword instance);
    partial void Deleteinteraction_url_keyword(interaction_url_keyword instance);
    partial void Insertinteraction_keyword(interaction_keyword instance);
    partial void Updateinteraction_keyword(interaction_keyword instance);
    partial void Deleteinteraction_keyword(interaction_keyword instance);
    partial void Insertinteraction_entity(interaction_entity instance);
    partial void Updateinteraction_entity(interaction_entity instance);
    partial void Deleteinteraction_entity(interaction_entity instance);
    partial void Insertinteraction(interaction instance);
    partial void Updateinteraction(interaction instance);
    partial void Deleteinteraction(interaction instance);
    #endregion
		
		public TycheDbDataContext() : 
				base(global::XemantiX.Persistence.Properties.Settings.Default.TycheConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TycheDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TycheDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TycheDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TycheDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<user_relation> user_relations
		{
			get
			{
				return this.GetTable<user_relation>();
			}
		}
		
		public System.Data.Linq.Table<interaction_type> interaction_types
		{
			get
			{
				return this.GetTable<interaction_type>();
			}
		}
		
		public System.Data.Linq.Table<interaction_url> interaction_urls
		{
			get
			{
				return this.GetTable<interaction_url>();
			}
		}
		
		public System.Data.Linq.Table<last_interaction_processed> last_interaction_processeds
		{
			get
			{
				return this.GetTable<last_interaction_processed>();
			}
		}
		
		public System.Data.Linq.Table<participant> participants
		{
			get
			{
				return this.GetTable<participant>();
			}
		}
		
		public System.Data.Linq.Table<participant_type> participant_types
		{
			get
			{
				return this.GetTable<participant_type>();
			}
		}
		
		public System.Data.Linq.Table<sns_type> sns_types
		{
			get
			{
				return this.GetTable<sns_type>();
			}
		}
		
		public System.Data.Linq.Table<sns_user> sns_users
		{
			get
			{
				return this.GetTable<sns_user>();
			}
		}
		
		public System.Data.Linq.Table<system_attribute> system_attributes
		{
			get
			{
				return this.GetTable<system_attribute>();
			}
		}
		
		public System.Data.Linq.Table<user_attribute> user_attributes
		{
			get
			{
				return this.GetTable<user_attribute>();
			}
		}
		
		public System.Data.Linq.Table<user_email> user_emails
		{
			get
			{
				return this.GetTable<user_email>();
			}
		}
		
		public System.Data.Linq.Table<interaction_url_entity> interaction_url_entities
		{
			get
			{
				return this.GetTable<interaction_url_entity>();
			}
		}
		
		public System.Data.Linq.Table<interaction_url_keyword> interaction_url_keywords
		{
			get
			{
				return this.GetTable<interaction_url_keyword>();
			}
		}
		
		public System.Data.Linq.Table<interaction_keyword> interaction_keywords
		{
			get
			{
				return this.GetTable<interaction_keyword>();
			}
		}
		
		public System.Data.Linq.Table<interaction_entity> interaction_entities
		{
			get
			{
				return this.GetTable<interaction_entity>();
			}
		}
		
		public System.Data.Linq.Table<interaction> interactions
		{
			get
			{
				return this.GetTable<interaction>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_relation")]
	public partial class user_relation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _sns_uid_src;
		
		private int _sns_uid_dst;
		
		private int _sns_type_id;
		
		private string _tag;
		
		private EntityRef<sns_type> _sns_type;
		
		private EntityRef<sns_user> _sns_user;
		
		private EntityRef<sns_user> _sns_user1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onsns_uid_srcChanging(int value);
    partial void Onsns_uid_srcChanged();
    partial void Onsns_uid_dstChanging(int value);
    partial void Onsns_uid_dstChanged();
    partial void Onsns_type_idChanging(int value);
    partial void Onsns_type_idChanged();
    partial void OntagChanging(string value);
    partial void OntagChanged();
    #endregion
		
		public user_relation()
		{
			this._sns_type = default(EntityRef<sns_type>);
			this._sns_user = default(EntityRef<sns_user>);
			this._sns_user1 = default(EntityRef<sns_user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sns_uid_src", DbType="Int NOT NULL")]
		public int sns_uid_src
		{
			get
			{
				return this._sns_uid_src;
			}
			set
			{
				if ((this._sns_uid_src != value))
				{
					if (this._sns_user1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsns_uid_srcChanging(value);
					this.SendPropertyChanging();
					this._sns_uid_src = value;
					this.SendPropertyChanged("sns_uid_src");
					this.Onsns_uid_srcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sns_uid_dst", DbType="Int NOT NULL")]
		public int sns_uid_dst
		{
			get
			{
				return this._sns_uid_dst;
			}
			set
			{
				if ((this._sns_uid_dst != value))
				{
					if (this._sns_user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsns_uid_dstChanging(value);
					this.SendPropertyChanging();
					this._sns_uid_dst = value;
					this.SendPropertyChanged("sns_uid_dst");
					this.Onsns_uid_dstChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sns_type_id", DbType="Int NOT NULL")]
		public int sns_type_id
		{
			get
			{
				return this._sns_type_id;
			}
			set
			{
				if ((this._sns_type_id != value))
				{
					if (this._sns_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsns_type_idChanging(value);
					this.SendPropertyChanging();
					this._sns_type_id = value;
					this.SendPropertyChanged("sns_type_id");
					this.Onsns_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tag", DbType="NVarChar(255)")]
		public string tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if ((this._tag != value))
				{
					this.OntagChanging(value);
					this.SendPropertyChanging();
					this._tag = value;
					this.SendPropertyChanged("tag");
					this.OntagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sns_type_user_relation", Storage="_sns_type", ThisKey="sns_type_id", OtherKey="id", IsForeignKey=true)]
		public sns_type sns_type
		{
			get
			{
				return this._sns_type.Entity;
			}
			set
			{
				sns_type previousValue = this._sns_type.Entity;
				if (((previousValue != value) 
							|| (this._sns_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sns_type.Entity = null;
						previousValue.user_relations.Remove(this);
					}
					this._sns_type.Entity = value;
					if ((value != null))
					{
						value.user_relations.Add(this);
						this._sns_type_id = value.id;
					}
					else
					{
						this._sns_type_id = default(int);
					}
					this.SendPropertyChanged("sns_type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sns_user_user_relation", Storage="_sns_user", ThisKey="sns_uid_dst", OtherKey="sns_uid", IsForeignKey=true)]
		public sns_user sns_user
		{
			get
			{
				return this._sns_user.Entity;
			}
			set
			{
				sns_user previousValue = this._sns_user.Entity;
				if (((previousValue != value) 
							|| (this._sns_user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sns_user.Entity = null;
						previousValue.user_relations.Remove(this);
					}
					this._sns_user.Entity = value;
					if ((value != null))
					{
						value.user_relations.Add(this);
						this._sns_uid_dst = value.sns_uid;
					}
					else
					{
						this._sns_uid_dst = default(int);
					}
					this.SendPropertyChanged("sns_user");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sns_user_user_relation1", Storage="_sns_user1", ThisKey="sns_uid_src", OtherKey="sns_uid", IsForeignKey=true)]
		public sns_user sns_user1
		{
			get
			{
				return this._sns_user1.Entity;
			}
			set
			{
				sns_user previousValue = this._sns_user1.Entity;
				if (((previousValue != value) 
							|| (this._sns_user1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sns_user1.Entity = null;
						previousValue.user_relations1.Remove(this);
					}
					this._sns_user1.Entity = value;
					if ((value != null))
					{
						value.user_relations1.Add(this);
						this._sns_uid_src = value.sns_uid;
					}
					else
					{
						this._sns_uid_src = default(int);
					}
					this.SendPropertyChanged("sns_user1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.interaction_type")]
	public partial class interaction_type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _type;
		
		private EntitySet<interaction> _interactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    #endregion
		
		public interaction_type()
		{
			this._interactions = new EntitySet<interaction>(new Action<interaction>(this.attach_interactions), new Action<interaction>(this.detach_interactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="interaction_type_interaction", Storage="_interactions", ThisKey="id", OtherKey="interaction_type")]
		public EntitySet<interaction> interactions
		{
			get
			{
				return this._interactions;
			}
			set
			{
				this._interactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_interactions(interaction entity)
		{
			this.SendPropertyChanging();
			entity.interaction_type1 = this;
		}
		
		private void detach_interactions(interaction entity)
		{
			this.SendPropertyChanging();
			entity.interaction_type1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.interaction_urls")]
	public partial class interaction_url : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _interaction_id;
		
		private string _url;
		
		private EntitySet<interaction_url_entity> _interaction_url_entities;
		
		private EntitySet<interaction_url_keyword> _interaction_url_keywords;
		
		private EntityRef<interaction> _interaction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Oninteraction_idChanging(int value);
    partial void Oninteraction_idChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    #endregion
		
		public interaction_url()
		{
			this._interaction_url_entities = new EntitySet<interaction_url_entity>(new Action<interaction_url_entity>(this.attach_interaction_url_entities), new Action<interaction_url_entity>(this.detach_interaction_url_entities));
			this._interaction_url_keywords = new EntitySet<interaction_url_keyword>(new Action<interaction_url_keyword>(this.attach_interaction_url_keywords), new Action<interaction_url_keyword>(this.detach_interaction_url_keywords));
			this._interaction = default(EntityRef<interaction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_interaction_id", DbType="Int NOT NULL")]
		public int interaction_id
		{
			get
			{
				return this._interaction_id;
			}
			set
			{
				if ((this._interaction_id != value))
				{
					if (this._interaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oninteraction_idChanging(value);
					this.SendPropertyChanging();
					this._interaction_id = value;
					this.SendPropertyChanged("interaction_id");
					this.Oninteraction_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="interaction_url_interaction_url_entity", Storage="_interaction_url_entities", ThisKey="id", OtherKey="interaction_url_id")]
		public EntitySet<interaction_url_entity> interaction_url_entities
		{
			get
			{
				return this._interaction_url_entities;
			}
			set
			{
				this._interaction_url_entities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="interaction_url_interaction_url_keyword", Storage="_interaction_url_keywords", ThisKey="id", OtherKey="interaction_url_id")]
		public EntitySet<interaction_url_keyword> interaction_url_keywords
		{
			get
			{
				return this._interaction_url_keywords;
			}
			set
			{
				this._interaction_url_keywords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="interaction_interaction_url", Storage="_interaction", ThisKey="interaction_id", OtherKey="id", IsForeignKey=true)]
		public interaction interaction
		{
			get
			{
				return this._interaction.Entity;
			}
			set
			{
				interaction previousValue = this._interaction.Entity;
				if (((previousValue != value) 
							|| (this._interaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._interaction.Entity = null;
						previousValue.interaction_urls.Remove(this);
					}
					this._interaction.Entity = value;
					if ((value != null))
					{
						value.interaction_urls.Add(this);
						this._interaction_id = value.id;
					}
					else
					{
						this._interaction_id = default(int);
					}
					this.SendPropertyChanged("interaction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_interaction_url_entities(interaction_url_entity entity)
		{
			this.SendPropertyChanging();
			entity.interaction_url = this;
		}
		
		private void detach_interaction_url_entities(interaction_url_entity entity)
		{
			this.SendPropertyChanging();
			entity.interaction_url = null;
		}
		
		private void attach_interaction_url_keywords(interaction_url_keyword entity)
		{
			this.SendPropertyChanging();
			entity.interaction_url = this;
		}
		
		private void detach_interaction_url_keywords(interaction_url_keyword entity)
		{
			this.SendPropertyChanging();
			entity.interaction_url = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.last_interaction_processed")]
	public partial class last_interaction_processed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _action;
		
		private System.Nullable<int> _interaction_id;
		
		private EntityRef<interaction> _interaction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnactionChanging(string value);
    partial void OnactionChanged();
    partial void Oninteraction_idChanging(System.Nullable<int> value);
    partial void Oninteraction_idChanged();
    #endregion
		
		public last_interaction_processed()
		{
			this._interaction = default(EntityRef<interaction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_action", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string action
		{
			get
			{
				return this._action;
			}
			set
			{
				if ((this._action != value))
				{
					this.OnactionChanging(value);
					this.SendPropertyChanging();
					this._action = value;
					this.SendPropertyChanged("action");
					this.OnactionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_interaction_id", DbType="Int")]
		public System.Nullable<int> interaction_id
		{
			get
			{
				return this._interaction_id;
			}
			set
			{
				if ((this._interaction_id != value))
				{
					if (this._interaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oninteraction_idChanging(value);
					this.SendPropertyChanging();
					this._interaction_id = value;
					this.SendPropertyChanged("interaction_id");
					this.Oninteraction_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="interaction_last_interaction_processed", Storage="_interaction", ThisKey="interaction_id", OtherKey="id", IsForeignKey=true)]
		public interaction interaction
		{
			get
			{
				return this._interaction.Entity;
			}
			set
			{
				interaction previousValue = this._interaction.Entity;
				if (((previousValue != value) 
							|| (this._interaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._interaction.Entity = null;
						previousValue.last_interaction_processeds.Remove(this);
					}
					this._interaction.Entity = value;
					if ((value != null))
					{
						value.last_interaction_processeds.Add(this);
						this._interaction_id = value.id;
					}
					else
					{
						this._interaction_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("interaction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.participant")]
	public partial class participant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _interaction_id;
		
		private int _sns_uid;
		
		private int _participant_type_id;
		
		private EntityRef<participant_type> _participant_type;
		
		private EntityRef<sns_user> _sns_user;
		
		private EntityRef<interaction> _interaction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Oninteraction_idChanging(int value);
    partial void Oninteraction_idChanged();
    partial void Onsns_uidChanging(int value);
    partial void Onsns_uidChanged();
    partial void Onparticipant_type_idChanging(int value);
    partial void Onparticipant_type_idChanged();
    #endregion
		
		public participant()
		{
			this._participant_type = default(EntityRef<participant_type>);
			this._sns_user = default(EntityRef<sns_user>);
			this._interaction = default(EntityRef<interaction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_interaction_id", DbType="Int NOT NULL")]
		public int interaction_id
		{
			get
			{
				return this._interaction_id;
			}
			set
			{
				if ((this._interaction_id != value))
				{
					if (this._interaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oninteraction_idChanging(value);
					this.SendPropertyChanging();
					this._interaction_id = value;
					this.SendPropertyChanged("interaction_id");
					this.Oninteraction_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sns_uid", DbType="Int NOT NULL")]
		public int sns_uid
		{
			get
			{
				return this._sns_uid;
			}
			set
			{
				if ((this._sns_uid != value))
				{
					if (this._sns_user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsns_uidChanging(value);
					this.SendPropertyChanging();
					this._sns_uid = value;
					this.SendPropertyChanged("sns_uid");
					this.Onsns_uidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_participant_type_id", DbType="Int NOT NULL")]
		public int participant_type_id
		{
			get
			{
				return this._participant_type_id;
			}
			set
			{
				if ((this._participant_type_id != value))
				{
					if (this._participant_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onparticipant_type_idChanging(value);
					this.SendPropertyChanging();
					this._participant_type_id = value;
					this.SendPropertyChanged("participant_type_id");
					this.Onparticipant_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="participant_type_participant", Storage="_participant_type", ThisKey="participant_type_id", OtherKey="id", IsForeignKey=true)]
		public participant_type participant_type
		{
			get
			{
				return this._participant_type.Entity;
			}
			set
			{
				participant_type previousValue = this._participant_type.Entity;
				if (((previousValue != value) 
							|| (this._participant_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._participant_type.Entity = null;
						previousValue.participants.Remove(this);
					}
					this._participant_type.Entity = value;
					if ((value != null))
					{
						value.participants.Add(this);
						this._participant_type_id = value.id;
					}
					else
					{
						this._participant_type_id = default(int);
					}
					this.SendPropertyChanged("participant_type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sns_user_participant", Storage="_sns_user", ThisKey="sns_uid", OtherKey="sns_uid", IsForeignKey=true)]
		public sns_user sns_user
		{
			get
			{
				return this._sns_user.Entity;
			}
			set
			{
				sns_user previousValue = this._sns_user.Entity;
				if (((previousValue != value) 
							|| (this._sns_user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sns_user.Entity = null;
						previousValue.participants.Remove(this);
					}
					this._sns_user.Entity = value;
					if ((value != null))
					{
						value.participants.Add(this);
						this._sns_uid = value.sns_uid;
					}
					else
					{
						this._sns_uid = default(int);
					}
					this.SendPropertyChanged("sns_user");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="interaction_participant", Storage="_interaction", ThisKey="interaction_id", OtherKey="id", IsForeignKey=true)]
		public interaction interaction
		{
			get
			{
				return this._interaction.Entity;
			}
			set
			{
				interaction previousValue = this._interaction.Entity;
				if (((previousValue != value) 
							|| (this._interaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._interaction.Entity = null;
						previousValue.participants.Remove(this);
					}
					this._interaction.Entity = value;
					if ((value != null))
					{
						value.participants.Add(this);
						this._interaction_id = value.id;
					}
					else
					{
						this._interaction_id = default(int);
					}
					this.SendPropertyChanged("interaction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.participant_type")]
	public partial class participant_type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _type;
		
		private EntitySet<participant> _participants;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    #endregion
		
		public participant_type()
		{
			this._participants = new EntitySet<participant>(new Action<participant>(this.attach_participants), new Action<participant>(this.detach_participants));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="participant_type_participant", Storage="_participants", ThisKey="id", OtherKey="participant_type_id")]
		public EntitySet<participant> participants
		{
			get
			{
				return this._participants;
			}
			set
			{
				this._participants.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_participants(participant entity)
		{
			this.SendPropertyChanging();
			entity.participant_type = this;
		}
		
		private void detach_participants(participant entity)
		{
			this.SendPropertyChanging();
			entity.participant_type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sns_type")]
	public partial class sns_type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _type;
		
		private EntitySet<user_relation> _user_relations;
		
		private EntitySet<sns_user> _sns_users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    #endregion
		
		public sns_type()
		{
			this._user_relations = new EntitySet<user_relation>(new Action<user_relation>(this.attach_user_relations), new Action<user_relation>(this.detach_user_relations));
			this._sns_users = new EntitySet<sns_user>(new Action<sns_user>(this.attach_sns_users), new Action<sns_user>(this.detach_sns_users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sns_type_user_relation", Storage="_user_relations", ThisKey="id", OtherKey="sns_type_id")]
		public EntitySet<user_relation> user_relations
		{
			get
			{
				return this._user_relations;
			}
			set
			{
				this._user_relations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sns_type_sns_user", Storage="_sns_users", ThisKey="id", OtherKey="sns_type_id")]
		public EntitySet<sns_user> sns_users
		{
			get
			{
				return this._sns_users;
			}
			set
			{
				this._sns_users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_user_relations(user_relation entity)
		{
			this.SendPropertyChanging();
			entity.sns_type = this;
		}
		
		private void detach_user_relations(user_relation entity)
		{
			this.SendPropertyChanging();
			entity.sns_type = null;
		}
		
		private void attach_sns_users(sns_user entity)
		{
			this.SendPropertyChanging();
			entity.sns_type = this;
		}
		
		private void detach_sns_users(sns_user entity)
		{
			this.SendPropertyChanging();
			entity.sns_type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sns_user")]
	public partial class sns_user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _sns_uid;
		
		private System.Nullable<int> _tyche_uid;
		
		private int _sns_type_id;
		
		private string _name;
		
		private EntitySet<user_relation> _user_relations;
		
		private EntitySet<user_relation> _user_relations1;
		
		private EntitySet<participant> _participants;
		
		private EntitySet<user_attribute> _user_attributes;
		
		private EntitySet<user_email> _user_emails;
		
		private EntityRef<sns_type> _sns_type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onsns_uidChanging(int value);
    partial void Onsns_uidChanged();
    partial void Ontyche_uidChanging(System.Nullable<int> value);
    partial void Ontyche_uidChanged();
    partial void Onsns_type_idChanging(int value);
    partial void Onsns_type_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public sns_user()
		{
			this._user_relations = new EntitySet<user_relation>(new Action<user_relation>(this.attach_user_relations), new Action<user_relation>(this.detach_user_relations));
			this._user_relations1 = new EntitySet<user_relation>(new Action<user_relation>(this.attach_user_relations1), new Action<user_relation>(this.detach_user_relations1));
			this._participants = new EntitySet<participant>(new Action<participant>(this.attach_participants), new Action<participant>(this.detach_participants));
			this._user_attributes = new EntitySet<user_attribute>(new Action<user_attribute>(this.attach_user_attributes), new Action<user_attribute>(this.detach_user_attributes));
			this._user_emails = new EntitySet<user_email>(new Action<user_email>(this.attach_user_emails), new Action<user_email>(this.detach_user_emails));
			this._sns_type = default(EntityRef<sns_type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sns_uid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int sns_uid
		{
			get
			{
				return this._sns_uid;
			}
			set
			{
				if ((this._sns_uid != value))
				{
					this.Onsns_uidChanging(value);
					this.SendPropertyChanging();
					this._sns_uid = value;
					this.SendPropertyChanged("sns_uid");
					this.Onsns_uidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tyche_uid", DbType="Int")]
		public System.Nullable<int> tyche_uid
		{
			get
			{
				return this._tyche_uid;
			}
			set
			{
				if ((this._tyche_uid != value))
				{
					this.Ontyche_uidChanging(value);
					this.SendPropertyChanging();
					this._tyche_uid = value;
					this.SendPropertyChanged("tyche_uid");
					this.Ontyche_uidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sns_type_id", DbType="Int NOT NULL")]
		public int sns_type_id
		{
			get
			{
				return this._sns_type_id;
			}
			set
			{
				if ((this._sns_type_id != value))
				{
					if (this._sns_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsns_type_idChanging(value);
					this.SendPropertyChanging();
					this._sns_type_id = value;
					this.SendPropertyChanged("sns_type_id");
					this.Onsns_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sns_user_user_relation", Storage="_user_relations", ThisKey="sns_uid", OtherKey="sns_uid_dst")]
		public EntitySet<user_relation> user_relations
		{
			get
			{
				return this._user_relations;
			}
			set
			{
				this._user_relations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sns_user_user_relation1", Storage="_user_relations1", ThisKey="sns_uid", OtherKey="sns_uid_src")]
		public EntitySet<user_relation> user_relations1
		{
			get
			{
				return this._user_relations1;
			}
			set
			{
				this._user_relations1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sns_user_participant", Storage="_participants", ThisKey="sns_uid", OtherKey="sns_uid")]
		public EntitySet<participant> participants
		{
			get
			{
				return this._participants;
			}
			set
			{
				this._participants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sns_user_user_attribute", Storage="_user_attributes", ThisKey="sns_uid", OtherKey="sns_uid")]
		public EntitySet<user_attribute> user_attributes
		{
			get
			{
				return this._user_attributes;
			}
			set
			{
				this._user_attributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sns_user_user_email", Storage="_user_emails", ThisKey="sns_uid", OtherKey="sns_uid")]
		public EntitySet<user_email> user_emails
		{
			get
			{
				return this._user_emails;
			}
			set
			{
				this._user_emails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sns_type_sns_user", Storage="_sns_type", ThisKey="sns_type_id", OtherKey="id", IsForeignKey=true)]
		public sns_type sns_type
		{
			get
			{
				return this._sns_type.Entity;
			}
			set
			{
				sns_type previousValue = this._sns_type.Entity;
				if (((previousValue != value) 
							|| (this._sns_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sns_type.Entity = null;
						previousValue.sns_users.Remove(this);
					}
					this._sns_type.Entity = value;
					if ((value != null))
					{
						value.sns_users.Add(this);
						this._sns_type_id = value.id;
					}
					else
					{
						this._sns_type_id = default(int);
					}
					this.SendPropertyChanged("sns_type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_user_relations(user_relation entity)
		{
			this.SendPropertyChanging();
			entity.sns_user = this;
		}
		
		private void detach_user_relations(user_relation entity)
		{
			this.SendPropertyChanging();
			entity.sns_user = null;
		}
		
		private void attach_user_relations1(user_relation entity)
		{
			this.SendPropertyChanging();
			entity.sns_user1 = this;
		}
		
		private void detach_user_relations1(user_relation entity)
		{
			this.SendPropertyChanging();
			entity.sns_user1 = null;
		}
		
		private void attach_participants(participant entity)
		{
			this.SendPropertyChanging();
			entity.sns_user = this;
		}
		
		private void detach_participants(participant entity)
		{
			this.SendPropertyChanging();
			entity.sns_user = null;
		}
		
		private void attach_user_attributes(user_attribute entity)
		{
			this.SendPropertyChanging();
			entity.sns_user = this;
		}
		
		private void detach_user_attributes(user_attribute entity)
		{
			this.SendPropertyChanging();
			entity.sns_user = null;
		}
		
		private void attach_user_emails(user_email entity)
		{
			this.SendPropertyChanging();
			entity.sns_user = this;
		}
		
		private void detach_user_emails(user_email entity)
		{
			this.SendPropertyChanging();
			entity.sns_user = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.system_attribute")]
	public partial class system_attribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private string _value;
		
		private System.Data.Linq.Binary _updated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnupdatedChanging(System.Data.Linq.Binary value);
    partial void OnupdatedChanged();
    #endregion
		
		public system_attribute()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updated", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary updated
		{
			get
			{
				return this._updated;
			}
			set
			{
				if ((this._updated != value))
				{
					this.OnupdatedChanging(value);
					this.SendPropertyChanging();
					this._updated = value;
					this.SendPropertyChanged("updated");
					this.OnupdatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_attribute")]
	public partial class user_attribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _sns_uid;
		
		private string _name;
		
		private string _value;
		
		private System.Data.Linq.Binary _updated;
		
		private EntityRef<sns_user> _sns_user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onsns_uidChanging(int value);
    partial void Onsns_uidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnupdatedChanging(System.Data.Linq.Binary value);
    partial void OnupdatedChanged();
    #endregion
		
		public user_attribute()
		{
			this._sns_user = default(EntityRef<sns_user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sns_uid", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int sns_uid
		{
			get
			{
				return this._sns_uid;
			}
			set
			{
				if ((this._sns_uid != value))
				{
					if (this._sns_user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsns_uidChanging(value);
					this.SendPropertyChanging();
					this._sns_uid = value;
					this.SendPropertyChanged("sns_uid");
					this.Onsns_uidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updated", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary updated
		{
			get
			{
				return this._updated;
			}
			set
			{
				if ((this._updated != value))
				{
					this.OnupdatedChanging(value);
					this.SendPropertyChanging();
					this._updated = value;
					this.SendPropertyChanged("updated");
					this.OnupdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sns_user_user_attribute", Storage="_sns_user", ThisKey="sns_uid", OtherKey="sns_uid", IsForeignKey=true)]
		public sns_user sns_user
		{
			get
			{
				return this._sns_user.Entity;
			}
			set
			{
				sns_user previousValue = this._sns_user.Entity;
				if (((previousValue != value) 
							|| (this._sns_user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sns_user.Entity = null;
						previousValue.user_attributes.Remove(this);
					}
					this._sns_user.Entity = value;
					if ((value != null))
					{
						value.user_attributes.Add(this);
						this._sns_uid = value.sns_uid;
					}
					else
					{
						this._sns_uid = default(int);
					}
					this.SendPropertyChanged("sns_user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_email")]
	public partial class user_email : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _sns_uid;
		
		private string _email;
		
		private EntityRef<sns_user> _sns_user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onsns_uidChanging(int value);
    partial void Onsns_uidChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public user_email()
		{
			this._sns_user = default(EntityRef<sns_user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sns_uid", DbType="Int NOT NULL")]
		public int sns_uid
		{
			get
			{
				return this._sns_uid;
			}
			set
			{
				if ((this._sns_uid != value))
				{
					if (this._sns_user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsns_uidChanging(value);
					this.SendPropertyChanging();
					this._sns_uid = value;
					this.SendPropertyChanged("sns_uid");
					this.Onsns_uidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sns_user_user_email", Storage="_sns_user", ThisKey="sns_uid", OtherKey="sns_uid", IsForeignKey=true)]
		public sns_user sns_user
		{
			get
			{
				return this._sns_user.Entity;
			}
			set
			{
				sns_user previousValue = this._sns_user.Entity;
				if (((previousValue != value) 
							|| (this._sns_user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sns_user.Entity = null;
						previousValue.user_emails.Remove(this);
					}
					this._sns_user.Entity = value;
					if ((value != null))
					{
						value.user_emails.Add(this);
						this._sns_uid = value.sns_uid;
					}
					else
					{
						this._sns_uid = default(int);
					}
					this.SendPropertyChanged("sns_user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.interaction_url_entities")]
	public partial class interaction_url_entity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _interaction_url_id;
		
		private string _entity;
		
		private int _entity_count;
		
		private System.Nullable<decimal> _entity_relevance;
		
		private string _entity_sentiment;
		
		private System.Nullable<decimal> _entity_sentiment_score;
		
		private EntityRef<interaction_url> _interaction_url;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Oninteraction_url_idChanging(int value);
    partial void Oninteraction_url_idChanged();
    partial void OnentityChanging(string value);
    partial void OnentityChanged();
    partial void Onentity_countChanging(int value);
    partial void Onentity_countChanged();
    partial void Onentity_relevanceChanging(System.Nullable<decimal> value);
    partial void Onentity_relevanceChanged();
    partial void Onentity_sentimentChanging(string value);
    partial void Onentity_sentimentChanged();
    partial void Onentity_sentiment_scoreChanging(System.Nullable<decimal> value);
    partial void Onentity_sentiment_scoreChanged();
    #endregion
		
		public interaction_url_entity()
		{
			this._interaction_url = default(EntityRef<interaction_url>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_interaction_url_id", DbType="Int NOT NULL")]
		public int interaction_url_id
		{
			get
			{
				return this._interaction_url_id;
			}
			set
			{
				if ((this._interaction_url_id != value))
				{
					if (this._interaction_url.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oninteraction_url_idChanging(value);
					this.SendPropertyChanging();
					this._interaction_url_id = value;
					this.SendPropertyChanged("interaction_url_id");
					this.Oninteraction_url_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entity", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string entity
		{
			get
			{
				return this._entity;
			}
			set
			{
				if ((this._entity != value))
				{
					this.OnentityChanging(value);
					this.SendPropertyChanging();
					this._entity = value;
					this.SendPropertyChanged("entity");
					this.OnentityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entity_count", DbType="Int NOT NULL")]
		public int entity_count
		{
			get
			{
				return this._entity_count;
			}
			set
			{
				if ((this._entity_count != value))
				{
					this.Onentity_countChanging(value);
					this.SendPropertyChanging();
					this._entity_count = value;
					this.SendPropertyChanged("entity_count");
					this.Onentity_countChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entity_relevance", DbType="Decimal(10,6)")]
		public System.Nullable<decimal> entity_relevance
		{
			get
			{
				return this._entity_relevance;
			}
			set
			{
				if ((this._entity_relevance != value))
				{
					this.Onentity_relevanceChanging(value);
					this.SendPropertyChanging();
					this._entity_relevance = value;
					this.SendPropertyChanged("entity_relevance");
					this.Onentity_relevanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entity_sentiment", DbType="NVarChar(250)")]
		public string entity_sentiment
		{
			get
			{
				return this._entity_sentiment;
			}
			set
			{
				if ((this._entity_sentiment != value))
				{
					this.Onentity_sentimentChanging(value);
					this.SendPropertyChanging();
					this._entity_sentiment = value;
					this.SendPropertyChanged("entity_sentiment");
					this.Onentity_sentimentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entity_sentiment_score", DbType="Decimal(10,6)")]
		public System.Nullable<decimal> entity_sentiment_score
		{
			get
			{
				return this._entity_sentiment_score;
			}
			set
			{
				if ((this._entity_sentiment_score != value))
				{
					this.Onentity_sentiment_scoreChanging(value);
					this.SendPropertyChanging();
					this._entity_sentiment_score = value;
					this.SendPropertyChanged("entity_sentiment_score");
					this.Onentity_sentiment_scoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="interaction_url_interaction_url_entity", Storage="_interaction_url", ThisKey="interaction_url_id", OtherKey="id", IsForeignKey=true)]
		public interaction_url interaction_url
		{
			get
			{
				return this._interaction_url.Entity;
			}
			set
			{
				interaction_url previousValue = this._interaction_url.Entity;
				if (((previousValue != value) 
							|| (this._interaction_url.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._interaction_url.Entity = null;
						previousValue.interaction_url_entities.Remove(this);
					}
					this._interaction_url.Entity = value;
					if ((value != null))
					{
						value.interaction_url_entities.Add(this);
						this._interaction_url_id = value.id;
					}
					else
					{
						this._interaction_url_id = default(int);
					}
					this.SendPropertyChanged("interaction_url");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.interaction_url_keywords")]
	public partial class interaction_url_keyword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _interaction_url_id;
		
		private string _keyword;
		
		private int _keyword_count;
		
		private System.Nullable<decimal> _keyword_relevance;
		
		private string _keyword_sentiment;
		
		private System.Nullable<decimal> _keyword_sentiment_score;
		
		private EntityRef<interaction_url> _interaction_url;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Oninteraction_url_idChanging(int value);
    partial void Oninteraction_url_idChanged();
    partial void OnkeywordChanging(string value);
    partial void OnkeywordChanged();
    partial void Onkeyword_countChanging(int value);
    partial void Onkeyword_countChanged();
    partial void Onkeyword_relevanceChanging(System.Nullable<decimal> value);
    partial void Onkeyword_relevanceChanged();
    partial void Onkeyword_sentimentChanging(string value);
    partial void Onkeyword_sentimentChanged();
    partial void Onkeyword_sentiment_scoreChanging(System.Nullable<decimal> value);
    partial void Onkeyword_sentiment_scoreChanged();
    #endregion
		
		public interaction_url_keyword()
		{
			this._interaction_url = default(EntityRef<interaction_url>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_interaction_url_id", DbType="Int NOT NULL")]
		public int interaction_url_id
		{
			get
			{
				return this._interaction_url_id;
			}
			set
			{
				if ((this._interaction_url_id != value))
				{
					if (this._interaction_url.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oninteraction_url_idChanging(value);
					this.SendPropertyChanging();
					this._interaction_url_id = value;
					this.SendPropertyChanged("interaction_url_id");
					this.Oninteraction_url_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_keyword", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string keyword
		{
			get
			{
				return this._keyword;
			}
			set
			{
				if ((this._keyword != value))
				{
					this.OnkeywordChanging(value);
					this.SendPropertyChanging();
					this._keyword = value;
					this.SendPropertyChanged("keyword");
					this.OnkeywordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_keyword_count", DbType="Int NOT NULL")]
		public int keyword_count
		{
			get
			{
				return this._keyword_count;
			}
			set
			{
				if ((this._keyword_count != value))
				{
					this.Onkeyword_countChanging(value);
					this.SendPropertyChanging();
					this._keyword_count = value;
					this.SendPropertyChanged("keyword_count");
					this.Onkeyword_countChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_keyword_relevance", DbType="Decimal(10,6)")]
		public System.Nullable<decimal> keyword_relevance
		{
			get
			{
				return this._keyword_relevance;
			}
			set
			{
				if ((this._keyword_relevance != value))
				{
					this.Onkeyword_relevanceChanging(value);
					this.SendPropertyChanging();
					this._keyword_relevance = value;
					this.SendPropertyChanged("keyword_relevance");
					this.Onkeyword_relevanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_keyword_sentiment", DbType="NVarChar(250)")]
		public string keyword_sentiment
		{
			get
			{
				return this._keyword_sentiment;
			}
			set
			{
				if ((this._keyword_sentiment != value))
				{
					this.Onkeyword_sentimentChanging(value);
					this.SendPropertyChanging();
					this._keyword_sentiment = value;
					this.SendPropertyChanged("keyword_sentiment");
					this.Onkeyword_sentimentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_keyword_sentiment_score", DbType="Decimal(10,6)")]
		public System.Nullable<decimal> keyword_sentiment_score
		{
			get
			{
				return this._keyword_sentiment_score;
			}
			set
			{
				if ((this._keyword_sentiment_score != value))
				{
					this.Onkeyword_sentiment_scoreChanging(value);
					this.SendPropertyChanging();
					this._keyword_sentiment_score = value;
					this.SendPropertyChanged("keyword_sentiment_score");
					this.Onkeyword_sentiment_scoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="interaction_url_interaction_url_keyword", Storage="_interaction_url", ThisKey="interaction_url_id", OtherKey="id", IsForeignKey=true)]
		public interaction_url interaction_url
		{
			get
			{
				return this._interaction_url.Entity;
			}
			set
			{
				interaction_url previousValue = this._interaction_url.Entity;
				if (((previousValue != value) 
							|| (this._interaction_url.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._interaction_url.Entity = null;
						previousValue.interaction_url_keywords.Remove(this);
					}
					this._interaction_url.Entity = value;
					if ((value != null))
					{
						value.interaction_url_keywords.Add(this);
						this._interaction_url_id = value.id;
					}
					else
					{
						this._interaction_url_id = default(int);
					}
					this.SendPropertyChanged("interaction_url");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.interaction_keywords")]
	public partial class interaction_keyword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _interaction_id;
		
		private string _keyword;
		
		private int _keyword_count;
		
		private System.Nullable<decimal> _keyword_relevance;
		
		private string _keyword_sentiment;
		
		private System.Nullable<decimal> _keyword_sentiment_score;
		
		private EntityRef<interaction> _interaction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Oninteraction_idChanging(int value);
    partial void Oninteraction_idChanged();
    partial void OnkeywordChanging(string value);
    partial void OnkeywordChanged();
    partial void Onkeyword_countChanging(int value);
    partial void Onkeyword_countChanged();
    partial void Onkeyword_relevanceChanging(System.Nullable<decimal> value);
    partial void Onkeyword_relevanceChanged();
    partial void Onkeyword_sentimentChanging(string value);
    partial void Onkeyword_sentimentChanged();
    partial void Onkeyword_sentiment_scoreChanging(System.Nullable<decimal> value);
    partial void Onkeyword_sentiment_scoreChanged();
    #endregion
		
		public interaction_keyword()
		{
			this._interaction = default(EntityRef<interaction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_interaction_id", DbType="Int NOT NULL")]
		public int interaction_id
		{
			get
			{
				return this._interaction_id;
			}
			set
			{
				if ((this._interaction_id != value))
				{
					if (this._interaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oninteraction_idChanging(value);
					this.SendPropertyChanging();
					this._interaction_id = value;
					this.SendPropertyChanged("interaction_id");
					this.Oninteraction_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_keyword", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string keyword
		{
			get
			{
				return this._keyword;
			}
			set
			{
				if ((this._keyword != value))
				{
					this.OnkeywordChanging(value);
					this.SendPropertyChanging();
					this._keyword = value;
					this.SendPropertyChanged("keyword");
					this.OnkeywordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_keyword_count", DbType="Int NOT NULL")]
		public int keyword_count
		{
			get
			{
				return this._keyword_count;
			}
			set
			{
				if ((this._keyword_count != value))
				{
					this.Onkeyword_countChanging(value);
					this.SendPropertyChanging();
					this._keyword_count = value;
					this.SendPropertyChanged("keyword_count");
					this.Onkeyword_countChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_keyword_relevance", DbType="Decimal(10,6)")]
		public System.Nullable<decimal> keyword_relevance
		{
			get
			{
				return this._keyword_relevance;
			}
			set
			{
				if ((this._keyword_relevance != value))
				{
					this.Onkeyword_relevanceChanging(value);
					this.SendPropertyChanging();
					this._keyword_relevance = value;
					this.SendPropertyChanged("keyword_relevance");
					this.Onkeyword_relevanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_keyword_sentiment", DbType="NVarChar(250)")]
		public string keyword_sentiment
		{
			get
			{
				return this._keyword_sentiment;
			}
			set
			{
				if ((this._keyword_sentiment != value))
				{
					this.Onkeyword_sentimentChanging(value);
					this.SendPropertyChanging();
					this._keyword_sentiment = value;
					this.SendPropertyChanged("keyword_sentiment");
					this.Onkeyword_sentimentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_keyword_sentiment_score", DbType="Decimal(10,6)")]
		public System.Nullable<decimal> keyword_sentiment_score
		{
			get
			{
				return this._keyword_sentiment_score;
			}
			set
			{
				if ((this._keyword_sentiment_score != value))
				{
					this.Onkeyword_sentiment_scoreChanging(value);
					this.SendPropertyChanging();
					this._keyword_sentiment_score = value;
					this.SendPropertyChanged("keyword_sentiment_score");
					this.Onkeyword_sentiment_scoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="interaction_interaction_keyword", Storage="_interaction", ThisKey="interaction_id", OtherKey="id", IsForeignKey=true)]
		public interaction interaction
		{
			get
			{
				return this._interaction.Entity;
			}
			set
			{
				interaction previousValue = this._interaction.Entity;
				if (((previousValue != value) 
							|| (this._interaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._interaction.Entity = null;
						previousValue.interaction_keywords.Remove(this);
					}
					this._interaction.Entity = value;
					if ((value != null))
					{
						value.interaction_keywords.Add(this);
						this._interaction_id = value.id;
					}
					else
					{
						this._interaction_id = default(int);
					}
					this.SendPropertyChanged("interaction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.interaction_entities")]
	public partial class interaction_entity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _interaction_id;
		
		private string _entity;
		
		private int _entity_count;
		
		private System.Nullable<decimal> _entity_relevance;
		
		private string _entity_sentiment;
		
		private System.Nullable<decimal> _entity_sentiment_score;
		
		private EntityRef<interaction> _interaction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Oninteraction_idChanging(int value);
    partial void Oninteraction_idChanged();
    partial void OnentityChanging(string value);
    partial void OnentityChanged();
    partial void Onentity_countChanging(int value);
    partial void Onentity_countChanged();
    partial void Onentity_relevanceChanging(System.Nullable<decimal> value);
    partial void Onentity_relevanceChanged();
    partial void Onentity_sentimentChanging(string value);
    partial void Onentity_sentimentChanged();
    partial void Onentity_sentiment_scoreChanging(System.Nullable<decimal> value);
    partial void Onentity_sentiment_scoreChanged();
    #endregion
		
		public interaction_entity()
		{
			this._interaction = default(EntityRef<interaction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_interaction_id", DbType="Int NOT NULL")]
		public int interaction_id
		{
			get
			{
				return this._interaction_id;
			}
			set
			{
				if ((this._interaction_id != value))
				{
					if (this._interaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oninteraction_idChanging(value);
					this.SendPropertyChanging();
					this._interaction_id = value;
					this.SendPropertyChanged("interaction_id");
					this.Oninteraction_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entity", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string entity
		{
			get
			{
				return this._entity;
			}
			set
			{
				if ((this._entity != value))
				{
					this.OnentityChanging(value);
					this.SendPropertyChanging();
					this._entity = value;
					this.SendPropertyChanged("entity");
					this.OnentityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entity_count", DbType="Int NOT NULL")]
		public int entity_count
		{
			get
			{
				return this._entity_count;
			}
			set
			{
				if ((this._entity_count != value))
				{
					this.Onentity_countChanging(value);
					this.SendPropertyChanging();
					this._entity_count = value;
					this.SendPropertyChanged("entity_count");
					this.Onentity_countChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entity_relevance", DbType="Decimal(10,6)")]
		public System.Nullable<decimal> entity_relevance
		{
			get
			{
				return this._entity_relevance;
			}
			set
			{
				if ((this._entity_relevance != value))
				{
					this.Onentity_relevanceChanging(value);
					this.SendPropertyChanging();
					this._entity_relevance = value;
					this.SendPropertyChanged("entity_relevance");
					this.Onentity_relevanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entity_sentiment", DbType="NVarChar(250)")]
		public string entity_sentiment
		{
			get
			{
				return this._entity_sentiment;
			}
			set
			{
				if ((this._entity_sentiment != value))
				{
					this.Onentity_sentimentChanging(value);
					this.SendPropertyChanging();
					this._entity_sentiment = value;
					this.SendPropertyChanged("entity_sentiment");
					this.Onentity_sentimentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entity_sentiment_score", DbType="Decimal(10,6)")]
		public System.Nullable<decimal> entity_sentiment_score
		{
			get
			{
				return this._entity_sentiment_score;
			}
			set
			{
				if ((this._entity_sentiment_score != value))
				{
					this.Onentity_sentiment_scoreChanging(value);
					this.SendPropertyChanging();
					this._entity_sentiment_score = value;
					this.SendPropertyChanged("entity_sentiment_score");
					this.Onentity_sentiment_scoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="interaction_interaction_entity", Storage="_interaction", ThisKey="interaction_id", OtherKey="id", IsForeignKey=true)]
		public interaction interaction
		{
			get
			{
				return this._interaction.Entity;
			}
			set
			{
				interaction previousValue = this._interaction.Entity;
				if (((previousValue != value) 
							|| (this._interaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._interaction.Entity = null;
						previousValue.interaction_entities.Remove(this);
					}
					this._interaction.Entity = value;
					if ((value != null))
					{
						value.interaction_entities.Add(this);
						this._interaction_id = value.id;
					}
					else
					{
						this._interaction_id = default(int);
					}
					this.SendPropertyChanged("interaction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.interaction")]
	public partial class interaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _interaction_type;
		
		private System.DateTime _time;
		
		private System.Nullable<int> _duration;
		
		private string _message_id;
		
		private string _reply_to_id;
		
		private string _content_id;
		
		private EntitySet<interaction_url> _interaction_urls;
		
		private EntitySet<last_interaction_processed> _last_interaction_processeds;
		
		private EntitySet<participant> _participants;
		
		private EntitySet<interaction_keyword> _interaction_keywords;
		
		private EntitySet<interaction_entity> _interaction_entities;
		
		private EntityRef<interaction_type> _interaction_type1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Oninteraction_typeChanging(int value);
    partial void Oninteraction_typeChanged();
    partial void OntimeChanging(System.DateTime value);
    partial void OntimeChanged();
    partial void OndurationChanging(System.Nullable<int> value);
    partial void OndurationChanged();
    partial void Onmessage_idChanging(string value);
    partial void Onmessage_idChanged();
    partial void Onreply_to_idChanging(string value);
    partial void Onreply_to_idChanged();
    partial void Oncontent_idChanging(string value);
    partial void Oncontent_idChanged();
    #endregion
		
		public interaction()
		{
			this._interaction_urls = new EntitySet<interaction_url>(new Action<interaction_url>(this.attach_interaction_urls), new Action<interaction_url>(this.detach_interaction_urls));
			this._last_interaction_processeds = new EntitySet<last_interaction_processed>(new Action<last_interaction_processed>(this.attach_last_interaction_processeds), new Action<last_interaction_processed>(this.detach_last_interaction_processeds));
			this._participants = new EntitySet<participant>(new Action<participant>(this.attach_participants), new Action<participant>(this.detach_participants));
			this._interaction_keywords = new EntitySet<interaction_keyword>(new Action<interaction_keyword>(this.attach_interaction_keywords), new Action<interaction_keyword>(this.detach_interaction_keywords));
			this._interaction_entities = new EntitySet<interaction_entity>(new Action<interaction_entity>(this.attach_interaction_entities), new Action<interaction_entity>(this.detach_interaction_entities));
			this._interaction_type1 = default(EntityRef<interaction_type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_interaction_type", DbType="Int NOT NULL")]
		public int interaction_type
		{
			get
			{
				return this._interaction_type;
			}
			set
			{
				if ((this._interaction_type != value))
				{
					if (this._interaction_type1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oninteraction_typeChanging(value);
					this.SendPropertyChanging();
					this._interaction_type = value;
					this.SendPropertyChanged("interaction_type");
					this.Oninteraction_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time", DbType="DateTime NOT NULL")]
		public System.DateTime time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_duration", DbType="Int")]
		public System.Nullable<int> duration
		{
			get
			{
				return this._duration;
			}
			set
			{
				if ((this._duration != value))
				{
					this.OndurationChanging(value);
					this.SendPropertyChanging();
					this._duration = value;
					this.SendPropertyChanged("duration");
					this.OndurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message_id", DbType="NVarChar(255)")]
		public string message_id
		{
			get
			{
				return this._message_id;
			}
			set
			{
				if ((this._message_id != value))
				{
					this.Onmessage_idChanging(value);
					this.SendPropertyChanging();
					this._message_id = value;
					this.SendPropertyChanged("message_id");
					this.Onmessage_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reply_to_id", DbType="NVarChar(255)")]
		public string reply_to_id
		{
			get
			{
				return this._reply_to_id;
			}
			set
			{
				if ((this._reply_to_id != value))
				{
					this.Onreply_to_idChanging(value);
					this.SendPropertyChanging();
					this._reply_to_id = value;
					this.SendPropertyChanged("reply_to_id");
					this.Onreply_to_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content_id", DbType="NVarChar(MAX)")]
		public string content_id
		{
			get
			{
				return this._content_id;
			}
			set
			{
				if ((this._content_id != value))
				{
					this.Oncontent_idChanging(value);
					this.SendPropertyChanging();
					this._content_id = value;
					this.SendPropertyChanged("content_id");
					this.Oncontent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="interaction_interaction_url", Storage="_interaction_urls", ThisKey="id", OtherKey="interaction_id")]
		public EntitySet<interaction_url> interaction_urls
		{
			get
			{
				return this._interaction_urls;
			}
			set
			{
				this._interaction_urls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="interaction_last_interaction_processed", Storage="_last_interaction_processeds", ThisKey="id", OtherKey="interaction_id")]
		public EntitySet<last_interaction_processed> last_interaction_processeds
		{
			get
			{
				return this._last_interaction_processeds;
			}
			set
			{
				this._last_interaction_processeds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="interaction_participant", Storage="_participants", ThisKey="id", OtherKey="interaction_id")]
		public EntitySet<participant> participants
		{
			get
			{
				return this._participants;
			}
			set
			{
				this._participants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="interaction_interaction_keyword", Storage="_interaction_keywords", ThisKey="id", OtherKey="interaction_id")]
		public EntitySet<interaction_keyword> interaction_keywords
		{
			get
			{
				return this._interaction_keywords;
			}
			set
			{
				this._interaction_keywords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="interaction_interaction_entity", Storage="_interaction_entities", ThisKey="id", OtherKey="interaction_id")]
		public EntitySet<interaction_entity> interaction_entities
		{
			get
			{
				return this._interaction_entities;
			}
			set
			{
				this._interaction_entities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="interaction_type_interaction", Storage="_interaction_type1", ThisKey="interaction_type", OtherKey="id", IsForeignKey=true)]
		public interaction_type interaction_type1
		{
			get
			{
				return this._interaction_type1.Entity;
			}
			set
			{
				interaction_type previousValue = this._interaction_type1.Entity;
				if (((previousValue != value) 
							|| (this._interaction_type1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._interaction_type1.Entity = null;
						previousValue.interactions.Remove(this);
					}
					this._interaction_type1.Entity = value;
					if ((value != null))
					{
						value.interactions.Add(this);
						this._interaction_type = value.id;
					}
					else
					{
						this._interaction_type = default(int);
					}
					this.SendPropertyChanged("interaction_type1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_interaction_urls(interaction_url entity)
		{
			this.SendPropertyChanging();
			entity.interaction = this;
		}
		
		private void detach_interaction_urls(interaction_url entity)
		{
			this.SendPropertyChanging();
			entity.interaction = null;
		}
		
		private void attach_last_interaction_processeds(last_interaction_processed entity)
		{
			this.SendPropertyChanging();
			entity.interaction = this;
		}
		
		private void detach_last_interaction_processeds(last_interaction_processed entity)
		{
			this.SendPropertyChanging();
			entity.interaction = null;
		}
		
		private void attach_participants(participant entity)
		{
			this.SendPropertyChanging();
			entity.interaction = this;
		}
		
		private void detach_participants(participant entity)
		{
			this.SendPropertyChanging();
			entity.interaction = null;
		}
		
		private void attach_interaction_keywords(interaction_keyword entity)
		{
			this.SendPropertyChanging();
			entity.interaction = this;
		}
		
		private void detach_interaction_keywords(interaction_keyword entity)
		{
			this.SendPropertyChanging();
			entity.interaction = null;
		}
		
		private void attach_interaction_entities(interaction_entity entity)
		{
			this.SendPropertyChanging();
			entity.interaction = this;
		}
		
		private void detach_interaction_entities(interaction_entity entity)
		{
			this.SendPropertyChanging();
			entity.interaction = null;
		}
	}
}
#pragma warning restore 1591
